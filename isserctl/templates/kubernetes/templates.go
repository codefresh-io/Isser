
// Code generated by go generate; DO NOT EDIT.
// using data from templates/kubernetes
package kubernetes

func TemplatesMap() map[string]string {
    templatesMap := make(map[string]string)

templatesMap["cluster-role-binding.isser.yaml"] = `kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: {{ .AppName }}
subjects:
- kind: ServiceAccount
  name: {{ .AppName }}
  namespace: {{ .Env.AGENT_NAMESPACE }}
roleRef:
  kind: ClusterRole
  name: system:discovery
  apiGroup: rbac.authorization.k8s.io` 

templatesMap["codefresh-certs-server-secret.re.yaml"] = `apiVersion: v1
type: Opaque
kind: Secret
metadata:
  labels:
    app: isser
  name: codefresh-certs-server
  namespace: {{ .Namespace }}
data:
  server-cert.pem: {{ .ServerCert.Cert | base64.Encode  }}
  server-key.pem: {{ .ServerCert.Key | base64.Encode  }}
  ca.pem: {{ .ServerCert.Ca | base64.Encode  }}

` 

templatesMap["deployment.isser.yaml"] = `apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ .AppName }}
    version: {{ .Version }}
  name: {{ .AppName }}
  namespace: {{ .Namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .AppName }}
        version: {{ .Version }}
    spec:
      serviceAccountName: {{ .AppName }}
      containers:
      - env:
        - name: SELF_DEPLOYMENT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: CODEFRESH_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .AppName }}
              key: codefresh.token
        - name: CODEFRESH_HOST
          value: {{ .CodefreshHost }}
        - name: AGENT_MODE
          value: {{ .Mode }}
        - name: AGENT_NAME
          value: {{ .AppName }}
        image: {{ .Image.Name }}:{{ .Image.Tag }}
        imagePullPolicy: Always
        name: {{ .AppName }}
      restartPolicy: Always
` 

templatesMap["dind-daemon-conf.re.yaml"] = `---
apiVersion: v1
kind: ConfigMap
metadata:
  name: codefresh-dind-config
  namespace: {{ .Namespace }}
data:
  daemon.json: |
    {
      "hosts": [ "unix:///var/run/docker.sock",
                 "unix:///var/run/codefresh/docker.sock",
                 "tcp://0.0.0.0:1300"],
      "storage-driver": "overlay",
      "storage-opts": ["overlay.override_kernel_check=1"],
      "tlsverify": true,  
      "tls": true,
      "tlscacert": "/etc/ssl/cf-client/ca.pem",
      "tlscert": "/etc/ssl/cf/server-cert.pem",
      "tlskey": "/etc/ssl/cf/server-key.pem",
      "insecure-registries" : ["192.168.99.100:5000"],
      "metrics-addr" : "0.0.0.0:9323",
      "experimental" : true
    }
` 

templatesMap["dind-headless-service.re.yaml"] = `---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dind
  name: dind
  namespace: {{ .Namespace }}
spec:
  ports:
  - name: "dind-port"
    port: 1300
    protocol: TCP

  # This is a headless service, Kubernetes won't assign a VIP for it.
  # *.dind.default.svc.cluster.local
  clusterIP: None
  selector:
    app: dind

` 

templatesMap["role-binding.isser.yaml"] = `kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: {{ .AppName }}
  namespace: {{ .Namespace }}
subjects:
- kind: ServiceAccount
  name: {{ .AppName }}
roleRef:
  kind: Role
  name: {{ .AppName }}
  apiGroup: rbac.authorization.k8s.io` 

templatesMap["role.isser.yaml"] = `kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: {{ .AppName }}
  namespace: {{ .Namespace }}
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create", "delete"]` 

templatesMap["secret.isser.yaml"] = `apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ .AppName }}
  namespace: {{ .Namespace }}
data:
  codefresh.token: {{ .AgentToken | base64.Encode }}` 

templatesMap["service-account.isser.yaml"] = `apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .AppName }}
  namespace: {{ .Namespace }}` 

    return  templatesMap
}
